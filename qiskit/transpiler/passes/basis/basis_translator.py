# This code is part of Qiskit.
#
# (C) Copyright IBM 2017, 2020.
#
# This code is licensed under the Apache License, Version 2.0. You may
# obtain a copy of this license in the LICENSE.txt file in the root directory
# of this source tree or at http://www.apache.org/licenses/LICENSE-2.0.
#
# Any modifications or derivative works of this code must retain this
# copyright notice, and modified files need to carry a notice indicating
# that they have been altered from the originals.


"""Translates gates to a target basis using a given equivalence library."""

import time
import logging

from functools import singledispatchmethod
from itertools import zip_longest
from collections import defaultdict

from qiskit.circuit import (
    Gate,
    ParameterVector,
    QuantumRegister,
    ControlFlowOp,
    QuantumCircuit,
    ParameterExpression,
)
from qiskit.dagcircuit import DAGCircuit, DAGOpNode
from qiskit.converters import circuit_to_dag, dag_to_circuit
from qiskit.transpiler.basepasses import TransformationPass
from qiskit.transpiler.exceptions import TranspilerError
from qiskit.circuit.controlflow import CONTROL_FLOW_OP_NAMES
from qiskit.circuit.equivalence import EquivalenceLibrary

from qiskit._accelerate.basis.basis_translator import CoreBasisTranslator

logger = logging.getLogger(__name__)


class BasisTranslator(TransformationPass):
    """Translates gates to a target basis by searching for a set of translations
    from a given EquivalenceLibrary.

    This pass operates in several steps:

    * Determine the source basis from the input circuit.
    * Perform a Dijkstra search over basis sets, starting from the device's
      target_basis new gates are being generated using the rules from the provided
      EquivalenceLibrary and the search stops if all gates in the source basis have
      been generated.
    * The found path, as a set of rules from the EquivalenceLibrary, is composed
      into a set of gate replacement rules.
    * The composed replacement rules are applied in-place to each op node which
      is not already in the target_basis.

    If the target keyword argument is specified and that
    :class:`~qiskit.transpiler.Target` objects contains operations
    which are non-global (i.e. they are defined only for a subset of qubits),
    as calculated by :meth:`~qiskit.transpiler.Target.get_non_global_operation_names`,
    this pass will attempt to match the output translation to those constraints.
    For 1 qubit operations this is straightforward, the pass will perform a
    search using the union of the set of global operations with the set of operations
    defined solely on that qubit. For multi-qubit gates this is a bit more involved,
    while the behavior is initially similar to the single qubit case, just using all
    the qubits the operation is run on (where order is not significant) isn't sufficient.
    We also need to consider any potential local qubits defined on subsets of the
    quantum arguments for the multi-qubit operation. This means the target used for the
    search of a non-global multi-qubit gate is the union of global operations, non-global
    multi-qubit gates sharing the same qubits, and any non-global gates defined on
    any subset of the qubits used.


    .. note::

        In the case of non-global operations it is possible for a single
        execution of this pass to output an incomplete translation if any
        non-global gates are defined on qubits that are a subset of a larger
        multi-qubit gate. For example, if you have a ``u`` gate only defined on
        qubit 0 and an ``x`` gate only on qubit 1 it is possible when
        translating a 2 qubit operation on qubit 0 and 1 that the output might
        have ``u`` on qubit 1 and ``x`` on qubit 0. Typically running this pass
        a second time will correct these issues.

    .. _translation_errors:

    Translation Errors
    ------------------

    This pass will error if there is no path to translate an input gate to
    the specified basis. However, during a typical/default preset passmanager
    this pass gets run multiple times at different stages of the compilation
    pipeline. This means that potentially the input gates that are getting
    translated were not in the input circuit to :func:`~.transpile` as they
    were generated by an intermediate transform in the circuit.

    When this error occurs it typically means that either the target basis
    is not universal or there are additional equivalence rules needed in the
    :class:`~.EquivalenceLibrary` instance being used by the
    :class:`~.BasisTranslator` pass. You can refer to
    :ref:`custom_basis_gates` for details on adding custom equivalence rules.
    """

    def __init__(self, equivalence_library, target_basis, target=None, min_qubits=0):
        """Initialize a BasisTranslator instance.

        Args:
            equivalence_library (EquivalenceLibrary): The equivalence library
                which will be used by the BasisTranslator pass. (Instructions in
                this library will not be unrolled by this pass.)
            target_basis (list[str]): Target basis names to unroll to, e.g. ``['u3', 'cx']``.
            target (Target): The backend compilation target
            min_qubits (int): The minimum number of qubits for operations in the input
                dag to translate.
        """

        super().__init__()
        self._core = CoreBasisTranslator(
            equivalence_library,
            set() if target_basis is None else set(target_basis),
            min_qubits,
            target,
        )

    def run(self, dag):
        """Translate an input DAGCircuit to the target basis.

        Args:
            dag (DAGCircuit): input dag

        Raises:
            TranspilerError: if the target basis cannot be reached

        Returns:
            DAGCircuit: translated circuit.
        """

        # Pre-process in rust
        result = self._core.pre_compose(dag)
        if result is None:
            return dag
        basis_transforms = result["basis_transforms"]
        source_basis = result["source_basis"]
        qarg_local_basis_transforms = result["qarg_local_basis_transforms"]
        qargs_local_source_basis = result["qargs_local_source_basis"]
        target_basis = result["target_basis"]
        qarg_indices = {qubit: index for index, qubit in enumerate(dag.qubits)}

        # Compose found path into a set of instruction substitution rules.

        compose_start_time = time.time()
        instr_map = _compose_transforms(basis_transforms, source_basis, dag)
        extra_instr_map = {
            qarg: _compose_transforms(transforms, qargs_local_source_basis[qarg], dag)
            for qarg, transforms in qarg_local_basis_transforms.items()
        }

        compose_end_time = time.time()
        logger.info(
            "Basis translation paths composed in %.3fs.", compose_end_time - compose_start_time
        )

        # Replace source instructions with target translations.

        replace_start_time = time.time()

        def apply_translation(dag, wire_map):
            is_updated = False
            out_dag = dag.copy_empty_like()
            for node in dag.topological_op_nodes():
                node_qargs = tuple(wire_map[bit] for bit in node.qargs)
                qubit_set = frozenset(node_qargs)
                if node.name in target_basis or len(node.qargs) < self._core.min_qubits:
                    if node.name in CONTROL_FLOW_OP_NAMES:
                        flow_blocks = []
                        for block in node.op.blocks:
                            dag_block = circuit_to_dag(block)
                            updated_dag, is_updated = apply_translation(
                                dag_block,
                                {
                                    inner: wire_map[outer]
                                    for inner, outer in zip(block.qubits, node.qargs)
                                },
                            )
                            if is_updated:
                                flow_circ_block = dag_to_circuit(updated_dag)
                            else:
                                flow_circ_block = block
                            flow_blocks.append(flow_circ_block)
                        node.op = node.op.replace_blocks(flow_blocks)
                    out_dag.apply_operation_back(node.op, node.qargs, node.cargs, check=False)
                    continue
                if (
                    node_qargs in self._core.qargs_with_non_global_operation
                    and node.name in self._core.qargs_with_non_global_operation[node_qargs]
                ):
                    out_dag.apply_operation_back(node.op, node.qargs, node.cargs, check=False)
                    continue

                if dag.has_calibration_for(node):
                    out_dag.apply_operation_back(node.op, node.qargs, node.cargs, check=False)
                    continue
                if qubit_set in extra_instr_map:
                    self._replace_node(out_dag, node, extra_instr_map[qubit_set])
                elif (node.name, node.num_qubits) in instr_map:
                    self._replace_node(out_dag, node, instr_map)
                else:
                    raise TranspilerError(f"BasisTranslator did not map {node.name}.")
                is_updated = True
            return out_dag, is_updated

        out_dag, _ = apply_translation(dag, qarg_indices)
        replace_end_time = time.time()
        logger.info(
            "Basis translation instructions replaced in %.3fs.",
            replace_end_time - replace_start_time,
        )

        return out_dag

    def _replace_node(self, dag, node, instr_map):
        target_params, target_dag = instr_map[node.name, node.num_qubits]
        if len(node.params) != len(target_params):
            raise TranspilerError(
                "Translation num_params not equal to op num_params."
                f"Op: {node.params} {node.name} Translation: {target_params}\n{target_dag}"
            )
        if node.params:
            parameter_map = dict(zip(target_params, node.params))
            for inner_node in target_dag.topological_op_nodes():
                new_node = DAGOpNode.from_instruction(inner_node._to_circuit_instruction())
                new_node.qargs = tuple(
                    node.qargs[target_dag.find_bit(x).index] for x in inner_node.qargs
                )
                new_node.cargs = tuple(
                    node.cargs[target_dag.find_bit(x).index] for x in inner_node.cargs
                )

                if not new_node.is_standard_gate():
                    new_node.op = new_node.op.copy()
                if any(isinstance(x, ParameterExpression) for x in inner_node.params):
                    new_params = []
                    for param in new_node.params:
                        if not isinstance(param, ParameterExpression):
                            new_params.append(param)
                        else:
                            bind_dict = {x: parameter_map[x] for x in param.parameters}
                            if any(isinstance(x, ParameterExpression) for x in bind_dict.values()):
                                new_value = param
                                for x in bind_dict.items():
                                    new_value = new_value.assign(*x)
                            else:
                                new_value = param.bind(bind_dict)
                            if not new_value.parameters:
                                new_value = new_value.numeric()
                            new_params.append(new_value)
                    new_node.params = new_params
                    if not new_node.is_standard_gate():
                        new_node.op.params = new_params
                dag._apply_op_node_back(new_node)

            if isinstance(target_dag.global_phase, ParameterExpression):
                old_phase = target_dag.global_phase
                bind_dict = {x: parameter_map[x] for x in old_phase.parameters}
                if any(isinstance(x, ParameterExpression) for x in bind_dict.values()):
                    new_phase = old_phase
                    for x in bind_dict.items():
                        new_phase = new_phase.assign(*x)
                else:
                    new_phase = old_phase.bind(bind_dict)
                if not new_phase.parameters:
                    new_phase = new_phase.numeric()
                    if isinstance(new_phase, complex):
                        raise TranspilerError(f"Global phase must be real, but got '{new_phase}'")
                dag.global_phase += new_phase

        else:
            for inner_node in target_dag.topological_op_nodes():
                new_node = DAGOpNode.from_instruction(
                    inner_node._to_circuit_instruction(),
                )
                new_node.qargs = tuple(
                    node.qargs[target_dag.find_bit(x).index] for x in inner_node.qargs
                )
                new_node.cargs = tuple(
                    node.cargs[target_dag.find_bit(x).index] for x in inner_node.cargs
                )
                if not new_node.is_standard_gate:
                    new_node.op = new_node.op.copy()
                # dag_op may be the same instance as other ops in the dag,
                # so if there is a condition, need to copy
                if getattr(node.op, "condition", None):
                    new_node_op = new_node.op.to_mutable()
                    new_node_op.condition = node.op.condition
                    new_node.op = new_node_op
                dag._apply_op_node_back(new_node)
            if target_dag.global_phase:
                dag.global_phase += target_dag.global_phase


def _compose_transforms(basis_transforms, source_basis, source_dag):
    """Compose a set of basis transforms into a set of replacements.

    Args:
        basis_transforms (List[Tuple[gate_name, params, equiv]]): List of
            transforms to compose.
        source_basis (Set[Tuple[gate_name: str, gate_num_qubits: int]]): Names
            of gates which need to be translated.
        source_dag (DAGCircuit): DAG with example gates from source_basis.
            (Used to determine num_params for gate in source_basis.)

    Returns:
        Dict[gate_name, Tuple(params, dag)]: Dictionary mapping between each gate
            in source_basis and a DAGCircuit instance to replace it. Gates in
            source_basis but not affected by basis_transforms will be included
            as a key mapping to itself.
    """
    example_gates = _get_example_gates(source_dag)
    mapped_instrs = {}

    for gate_name, gate_num_qubits in source_basis:
        # Need to grab a gate instance to find num_qubits and num_params.
        # Can be removed following https://github.com/Qiskit/qiskit-terra/pull/3947 .
        example_gate = example_gates[gate_name, gate_num_qubits]
        num_params = len(example_gate.params)

        placeholder_params = ParameterVector(gate_name, num_params)
        placeholder_gate = Gate(gate_name, gate_num_qubits, list(placeholder_params))
        placeholder_gate.params = list(placeholder_params)

        dag = DAGCircuit()
        qr = QuantumRegister(gate_num_qubits)
        dag.add_qreg(qr)
        dag.apply_operation_back(placeholder_gate, qr, (), check=False)
        mapped_instrs[gate_name, gate_num_qubits] = placeholder_params, dag

    for gate_name, gate_num_qubits, equiv_params, equiv in basis_transforms:
        logger.debug(
            "Composing transform step: %s/%s %s =>\n%s",
            gate_name,
            gate_num_qubits,
            equiv_params,
            equiv,
        )

        for mapped_instr_name, (dag_params, dag) in mapped_instrs.items():
            doomed_nodes = [
                node
                for node in dag.op_nodes()
                if (node.name, node.num_qubits) == (gate_name, gate_num_qubits)
            ]

            if doomed_nodes and logger.isEnabledFor(logging.DEBUG):

                logger.debug(
                    "Updating transform for mapped instr %s %s from \n%s",
                    mapped_instr_name,
                    dag_params,
                    dag_to_circuit(dag, copy_operations=False),
                )

            for node in doomed_nodes:

                replacement = equiv.assign_parameters(dict(zip_longest(equiv_params, node.params)))

                replacement_dag = circuit_to_dag(replacement)

                dag.substitute_node_with_dag(node, replacement_dag)

            if doomed_nodes and logger.isEnabledFor(logging.DEBUG):

                logger.debug(
                    "Updated transform for mapped instr %s %s to\n%s",
                    mapped_instr_name,
                    dag_params,
                    dag_to_circuit(dag, copy_operations=False),
                )

    return mapped_instrs


def _get_example_gates(source_dag):
    def recurse(dag, example_gates=None):
        example_gates = example_gates or {}
        for node in dag.op_nodes():
            example_gates[(node.name, node.num_qubits)] = node
            if node.name in CONTROL_FLOW_OP_NAMES:
                for block in node.op.blocks:
                    example_gates = recurse(circuit_to_dag(block), example_gates)
        return example_gates

    return recurse(source_dag)
